syntax = "proto3";

package gamestate;

enum GameStage {
    UNKNOWN_STAGE = 0;
    AWAITING_PLAYERS = 1; // initial waiting room for players to join
    COLLECTING_RESPONSES = 2; // players are submitting inputs
    VOTING = 3; // players are voting on submitted inputs
    END_ROUND = 4; // end of the current round
    GAME_OVER = 5; // game has ended
}

enum InputType {
    UNKNOWN_INPUT = 0; // default value
    TEXT_INPUT = 1; // text input from players
    VOTE = 2; // vote on inputs
}

enum ResponseType {
    UNKNOWN_RESPONSE = 0; // default value
    GAME_STATE = 1; // responding with new game state
    ERROR = 2; // error occurred
}

message UserInput {
    InputType type = 1; // type of input (e.g., TEXT_INPUT, VOTE)
    oneof input {
        TextInput text_input = 2; // for text inputs
        Vote vote = 3; // for votes
    }
}

message TextInput {
    string id = 1;
    string text = 2;
    string player_id = 3;
    string input_type = 4; // e.g., "question", "answer"
}

message Vote {
    string voter_id = 1; // player id of voter
    string target_id = 2; // element id of vote target (e.g. TextInput id)
    string rank = 3; // future support for ranked choice voting
}

message Player {
    string id = 1;
    string display_name = 2;
    int32 score = 3;
    bool is_active = 4;
    bool is_pending_input = 5; // true if player needs to submit input this round but hasn't yet
}

// Simple GameState message with a string name
message GameState {
    string id = 1; // for future support of multiple game instances
    string name = 2;
    repeated Player players = 3;
    GameStage current_stage = 4;
    repeated TextInput text_inputs = 5;
    repeated Vote votes = 6;
    int32 time_remaining = 7; // in seconds
    string current_prompt = 8; // current question or prompt for the round
    string current_input_type = 9; // current type of thing we are inputting or voting on e.g., "question", "answer"
}

message ServerResponse {
    ResponseType type = 1; // type of response (e.g., GAME_STATE, ERROR)
    oneof response {
        GameState game_state = 2; // responding with new game state
        string error_message = 3; // error message if type is ERROR
    }
}